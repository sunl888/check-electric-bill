<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>电费余额监控</title>
    <script src="https://cdn.jsdelivr.net/npm/echarts@5.4.2/dist/echarts.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
</head>
<body>
    <div style="padding: 20px;">
        <input type="datetime-local" id="startTime">
        <input type="datetime-local" id="endTime">
        <button onclick="updateChart()">更新图表</button>
    </div>
    <div id="main" style="width: 100%;height:600px;"></div>

<script>
let rawData = [];
let myChart;

// 初始化图表
function initChart() {
    myChart = echarts.init(document.getElementById('main'));
    
    const option = {
        tooltip: { trigger: 'axis' },
        xAxis: { type: 'time' },
        yAxis: { scale: true },
        dataZoom: [{
            type: 'inside',
            start: 0,
            end: 100
        }, {
            start: 0,
            end: 100
        }],
        series: [{
            type: 'candlestick',
            itemStyle: {
                color: '#ef232a',
                color0: '#14b143',
                borderColor: '#ef232a',
                borderColor0: '#14b143'
            },
            data: []
        }]
    };
    myChart.setOption(option);
}

// 处理数据
function processData(start, end) {
    const filtered = rawData.filter(d => 
        d.date >= start && d.date <= end
    ).sort((a, b) => a.date - b.date);

    // 按小时分组
    const grouped = {};
    filtered.forEach(d => {
        const hour = new Date(d.date);
        hour.setMinutes(0, 0, 0);
        const key = hour.getTime();
        
        if (!grouped[key]) {
            grouped[key] = {
                open: d.value,
                close: d.value,
                high: d.value,
                low: d.value,
                time: hour
            };
        } else {
            grouped[key].close = d.value;
            grouped[key].high = Math.max(grouped[key].high, d.value);
            grouped[key].low = Math.min(grouped[key].low, d.value);
        }
    });

    return Object.values(grouped).map(d => [
        d.time,
        d.open,
        d.close,
        d.low,
        d.high
    ]);
}

// 更新图表
async function updateChart() {
    const start = new Date(document.getElementById('startTime').value);
    const end = new Date(document.getElementById('endTime').value);
    
    const seriesData = processData(start, end);
    
    myChart.setOption({
        series: [{
            data: seriesData
        }]
    });
}

// 加载CSV数据
async function loadData() {
    const response = await fetch('data.csv');
    const csv = await response.text();
    
    rawData = Papa.parse(csv, {
        header: true,
        dynamicTyping: true,
        skipEmptyLines: true,
        transform: (value, header) => {
            if (header === 'date') {
                return new Date(value);
            }
            return parseFloat(value);
        }
    }).data;

    // 设置默认时间范围
    const start = rawData[0].date;
    const end = rawData[rawData.length-1].date;
    document.getElementById('startTime').value = start.toISOString().slice(0,16);
    document.getElementById('endTime').value = end.toISOString().slice(0,16);
}

// 初始化
window.onload = async () => {
    initChart();
    await loadData();
    updateChart();
};
</script>
</body>
</html>
